// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: test.proto
import type {
  ByteSource,
  ClientConfiguration,
  ServiceHandler,
} from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
  createMethodHandler,
} from "twirpscript";

//========================================//
//      StatsService Protobuf Client      //
//========================================//

export async function GetActiveBeacons(
  testRequest: TestRequest,
  config?: ClientConfiguration
): Promise<TestResponse> {
  const response = await PBrequest(
    "/test.StatsService/GetActiveBeacons",
    TestRequest.encode(testRequest),
    config
  );
  return TestResponse.decode(response);
}

//========================================//
//        StatsService JSON Client        //
//========================================//

export async function GetActiveBeaconsJSON(
  testRequest: TestRequest,
  config?: ClientConfiguration
): Promise<TestResponse> {
  const response = await JSONrequest<TestResponse>(
    "/test.StatsService/GetActiveBeacons",
    testRequest,
    config
  );
  return response;
}

//========================================//
//          StatsService Service          //
//========================================//

export interface StatsServiceService<Context = unknown> {
  GetActiveBeacons: (
    testRequest: TestRequest,
    context: Context
  ) => Promise<TestResponse> | TestResponse;
}

export function createStatsServiceHandler<Context>(
  service: StatsServiceService<Context>
): ServiceHandler<Context> {
  return {
    name: "test.StatsService",
    methods: {
      GetActiveBeacons: createMethodHandler({
        handler: service.GetActiveBeacons,
        encode: TestResponse.encode,
        decode: TestRequest.decode,
      }),
    },
  };
}

//========================================//
//                 Types                  //
//========================================//

export interface TestRequest {}

export interface TestResponse {
  response: TestResponse.ResponseEntry[];
}

export namespace TestResponse {
  export interface ResponseEntry {
    key: number;
    value: number;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const TestRequest = {
  writeMessage: function (msg: TestRequest, writer: BinaryWriter): void {},

  encode: function (testRequest: TestRequest): Uint8Array {
    const writer = new BinaryWriter();
    TestRequest.writeMessage(testRequest, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<TestRequest>,
    reader: BinaryReader
  ): void {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        default: {
          reader.skipField();
          break;
        }
      }
    }
  },

  decode: function (bytes: ByteSource): TestRequest {
    const reader = new BinaryReader(bytes);
    const message = {};
    TestRequest.readMessage(message, reader);
    return message as TestRequest;
  },

  defaultValue: function (): TestRequest {
    return {};
  },
};

export const TestResponse = {
  writeMessage: function (msg: TestResponse, writer: BinaryWriter): void {
    if (msg.response.length > 0) {
      writer.writeRepeatedMessage(
        1,
        msg.response as any,
        TestResponse.ResponseEntry.writeMessage
      );
    }
  },

  encode: function (testResponse: TestResponse): Uint8Array {
    const writer = new BinaryWriter();
    TestResponse.writeMessage(testResponse, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<TestResponse>,
    reader: BinaryReader
  ): void {
    msg.response = [];
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const message = {};
          reader.readMessage(message, TestResponse.ResponseEntry.readMessage);
          msg.response.push(message as TestResponse.ResponseEntry);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
  },

  decode: function (bytes: ByteSource): TestResponse {
    const reader = new BinaryReader(bytes);
    const message = {};
    TestResponse.readMessage(message, reader);
    return message as TestResponse;
  },

  defaultValue: function (): TestResponse {
    return {
      response: [],
    };
  },

  ResponseEntry: {
    writeMessage: function (
      msg: TestResponse.ResponseEntry,
      writer: BinaryWriter
    ): void {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
    },

    encode: function (responseEntry: TestResponse.ResponseEntry): Uint8Array {
      const writer = new BinaryWriter();
      TestResponse.ResponseEntry.writeMessage(responseEntry, writer);
      return writer.getResultBuffer();
    },

    readMessage: function (
      msg: Partial<TestResponse.ResponseEntry>,
      reader: BinaryReader
    ): void {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      if (!msg.key) {
        msg.key = 0;
      }
      if (!msg.value) {
        msg.value = 0;
      }
    },

    decode: function (bytes: ByteSource): TestResponse.ResponseEntry {
      const reader = new BinaryReader(bytes);
      const message = {};
      TestResponse.ResponseEntry.readMessage(message, reader);
      return message as TestResponse.ResponseEntry;
    },

    defaultValue: function (): TestResponse.ResponseEntry {
      return {
        key: 0,
        value: 0,
      };
    },
  },
};
